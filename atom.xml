<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yamger&#39;s Blog</title>
  
  <subtitle>分享技术</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yamger.github.io/"/>
  <updated>2020-02-10T07:36:11.848Z</updated>
  <id>http://yamger.github.io/</id>
  
  <author>
    <name>yamger</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>反射的应用</title>
    <link href="http://yamger.github.io/2020/02/10/reflection-application/"/>
    <id>http://yamger.github.io/2020/02/10/reflection-application/</id>
    <published>2020-02-10T06:13:52.289Z</published>
    <updated>2020-02-10T07:36:11.848Z</updated>
    
    <content type="html"><![CDATA[<h2 id="应用1动态代理"><a class="markdownIt-Anchor" href="#应用1动态代理"></a> 应用1：动态代理</h2><h3 id="什么是动态代理"><a class="markdownIt-Anchor" href="#什么是动态代理"></a> 什么是动态代理</h3><p>使用一个代理将对象包装起来, 然后用该代理对象取代原始对象。任何对原始对象的调用都要通过代理。代理对象决定是否以及何时将方法调用转到原始对象上。<br>此过程可以想象经纪人和明星的关系。</p><p>动态代理是指客户通过代理类来调用其它对象的方法，并且是在程序运行时根据需要动态创建目标类的代理对象。</p><p><strong>动态代理相比于静态代理的优点：</strong><br>抽象角色中（接口）声明的所有方法都被转移到调用处理器一个集中的方法中处理，这样，我们可以更加灵活和统一的处理众多的方法。</p><p>首先回顾一下<strong>静态代理</strong>。<br>静态代理的特点是其代理类和被代理类在编译期就已经确定。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ClothFactory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">productCloth</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyClothFactory</span> <span class="keyword">implements</span> <span class="title">ClothFactory</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ClothFactory cf=<span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyClothFactory</span><span class="params">(ClothFactory cf)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cf = cf;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">productCloth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"代理工厂做准备工作"</span>);</span><br><span class="line">        cf.productCloth();</span><br><span class="line">        System.out.println(<span class="string">"代理工厂在做后续工作."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NikeFactory</span> <span class="keyword">implements</span> <span class="title">ClothFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">productCloth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Nike products some clothes."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ClothFactory nf = <span class="keyword">new</span> NikeFactory();</span><br><span class="line">        ProxyClothFactory pcf = <span class="keyword">new</span> ProxyClothFactory(nf);</span><br><span class="line">        pcf.productCloth();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>再来看一个具体的<strong>动态代理</strong>实例。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Human</span></span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getBeliefe</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">(String foor)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">superMan</span> <span class="keyword">implements</span> <span class="title">Human</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBeliefe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"I believe i can fly in sky."</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">(String food)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"superMan eats "</span> + food);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 要解决的问题：</span></span><br><span class="line"><span class="comment"> * 1 如何动态创建一个代理类及其对象</span></span><br><span class="line"><span class="comment"> * 2 如何通过代理类动态的调用被代理的方法</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj#调用此方法返回一个代理类的对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getProxyInstance</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        MyInvocationHandler handler = <span class="keyword">new</span> MyInvocationHandler();</span><br><span class="line">        handler.bind(obj);</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(obj.getClass().getClassLoader(), obj.getClass().getInterfaces(), handler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object obj = <span class="keyword">null</span>;<span class="comment">//需要使用被代理类的对象初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(Object o)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.obj=o;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通过代理类对象，调用方法a时，就会调用如下方法</span></span><br><span class="line">    <span class="comment">//将被代理类要执行的方法a的功能声明在invoke方法中</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">//proxy是上面的getProxyInstance返回的代理类实例，</span></span><br><span class="line">        <span class="comment">//method 为代理类调用的方法，此方法作为被代理类要调用的方法</span></span><br><span class="line">        Object retval= method.invoke(obj, args);</span><br><span class="line">        <span class="comment">//retval就作为invoke方法的返回值</span></span><br><span class="line">        <span class="keyword">return</span> retval;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        superMan sm = <span class="keyword">new</span> superMan();</span><br><span class="line">        <span class="comment">//代理类对象</span></span><br><span class="line">        Human pi = (Human) ProxyFactory.getProxyInstance(sm);</span><br><span class="line">        System.out.println(pi.getBeliefe());</span><br><span class="line">        pi.eat(<span class="string">"iron"</span>);</span><br><span class="line">        <span class="comment">//************************************</span></span><br><span class="line">        <span class="comment">//体现动态性</span></span><br><span class="line">        NikeFactory nf = <span class="keyword">new</span> NikeFactory();</span><br><span class="line">        ClothFactory pii = (ClothFactory)ProxyFactory.getProxyInstance(nf);</span><br><span class="line">        pii.productCloth();</span><br><span class="line">        <span class="comment">//I believe i can fly in sky.</span></span><br><span class="line">        <span class="comment">// superMan eats iron</span></span><br><span class="line">        <span class="comment">// Nike products some clothes.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><strong>动态代理与<code>AOP</code>的结合</strong></p><p>这里给出变更的部分。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HumanUtil</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"*********universal method 1.*********"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"*********universal method 2.*********"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 要解决的问题：</span></span><br><span class="line"><span class="comment"> * 1 如何动态创建一个代理类及其对象</span></span><br><span class="line"><span class="comment"> * 2 如何通过代理类动态的调用被代理的方法</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj#调用此方法返回一个代理类的对象</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getProxyInstance</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        MyInvocationHandler handler = <span class="keyword">new</span> MyInvocationHandler();</span><br><span class="line">        handler.bind(obj);</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(obj.getClass().getClassLoader(), obj.getClass().getInterfaces(), handler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object obj = <span class="keyword">null</span>;<span class="comment">//需要使用被代理类的对象初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(Object o)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.obj=o;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通过代理类对象，调用方法a时，就会调用如下方法</span></span><br><span class="line">    <span class="comment">//将被代理类要执行的方法a的功能声明在invoke方法中</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">//proxy是上面的getProxyInstance返回的代理类实例，不能在这里使用proxy</span></span><br><span class="line">        <span class="comment">//method 为代理类调用的方法，此方法作为被代理类要调用的方法</span></span><br><span class="line">        HumanUtil hu = <span class="keyword">new</span> HumanUtil();</span><br><span class="line">        hu.method1();</span><br><span class="line">        Object retval= method.invoke(obj, args);</span><br><span class="line">        <span class="comment">//retval就作为invoke方法的返回值</span></span><br><span class="line">        hu.method2();</span><br><span class="line">        <span class="keyword">return</span> retval;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        superMan sm = <span class="keyword">new</span> superMan();</span><br><span class="line">        <span class="comment">//代理类对象</span></span><br><span class="line">        Human pi = (Human) ProxyFactory.getProxyInstance(sm);</span><br><span class="line">        System.out.println(pi.getBeliefe());</span><br><span class="line">        pi.eat(<span class="string">"iron"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//************************************</span></span><br><span class="line">        <span class="comment">//体现动态性</span></span><br><span class="line">        NikeFactory nf = <span class="keyword">new</span> NikeFactory();</span><br><span class="line">        ClothFactory pii = (ClothFactory)ProxyFactory.getProxyInstance(nf);</span><br><span class="line">        pii.productCloth();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      Java反射机制的应用，例如动态代理
    
    </summary>
    
    
    
      <category term="Java" scheme="http://yamger.github.io/tags/Java/"/>
    
      <category term="reflection" scheme="http://yamger.github.io/tags/reflection/"/>
    
  </entry>
  
  <entry>
    <title>类加载的应用</title>
    <link href="http://yamger.github.io/2020/02/10/classloader-application/"/>
    <id>http://yamger.github.io/2020/02/10/classloader-application/</id>
    <published>2020-02-09T17:11:41.204Z</published>
    <updated>2020-02-10T07:35:37.924Z</updated>
    
    <content type="html"><![CDATA[<h2 id="classloader加载配置文件"><a class="markdownIt-Anchor" href="#classloader加载配置文件"></a> <code>ClassLoader</code>加载配置文件</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//读取配置文件1</span></span><br><span class="line">    Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line"><span class="comment">//        FileInputStream fis = new FileInputStream("jdbc1.properties");</span></span><br><span class="line"><span class="comment">//        prop.load(fis);</span></span><br><span class="line"><span class="comment">//        String user = prop.getProperty("user");</span></span><br><span class="line"><span class="comment">//        String password = prop.getProperty("password");</span></span><br><span class="line"><span class="comment">//        System.out.println(user);</span></span><br><span class="line"><span class="comment">//        System.out.println(password);</span></span><br><span class="line"><span class="comment">//        user = null;</span></span><br><span class="line"><span class="comment">//        password = null;</span></span><br><span class="line">    <span class="comment">// 使用类加载器</span></span><br><span class="line">    ClassLoader classLoader = ClassLoaderApplication<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span>;</span><br><span class="line">    <span class="comment">//此时位置在src下</span></span><br><span class="line">    InputStream ras = classLoader.getResourceAsStream(<span class="string">"jdbc1.properties"</span>);</span><br><span class="line">    prop.load(ras);</span><br><span class="line">    String user = prop.getProperty(<span class="string">"user"</span>);</span><br><span class="line">    String password = prop.getProperty(<span class="string">"password"</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    System.out.println(password);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      在此节中，我们将使用`ClassLoader的应用`来进行一些应用。
    
    </summary>
    
    
    
      <category term="Java" scheme="http://yamger.github.io/tags/Java/"/>
    
      <category term="reflection" scheme="http://yamger.github.io/tags/reflection/"/>
    
  </entry>
  
  <entry>
    <title>类的加载与ClassLoader</title>
    <link href="http://yamger.github.io/2020/02/10/class-loader/"/>
    <id>http://yamger.github.io/2020/02/10/class-loader/</id>
    <published>2020-02-09T16:49:56.252Z</published>
    <updated>2020-02-10T07:35:09.286Z</updated>
    
    <content type="html"><![CDATA[<h2 id="类加载器的作用"><a class="markdownIt-Anchor" href="#类加载器的作用"></a> 类加载器的作用</h2><p><strong>加载类：</strong><br>将<code>class</code>文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后在堆中生成一个代表这个类的<code>java.lang.Class</code>对象，作为方法区中类数据的访问入口。</p><p><strong>类缓存：</strong><br>标准的<code>JavaSE</code>类加载器可以按要求查找类，但一旦某个类被加载到类加载器中，它将维持加载（缓存）一段时间。不过<code>JVM</code>垃圾回收机制可以回收这些<code>Class</code>对象。</p><h2 id="classloader"><a class="markdownIt-Anchor" href="#classloader"></a> <code>ClassLoader</code></h2><p>类加载器作用是用来把类(class)装载进内存的。JVM 规范定义了如下类型的类的加载器。</p><ol><li><p><code>BootStrap ClassLoader</code>-引导类加载器：用C++编写的，是JVM自带的类加载器，负责Java平台核心库，用来装载核心类库。该加载器无法直接获取。</p></li><li><p><code>Extension ClassLoader</code>-扩展类加载器：负责<code>jre/lib/ext</code>目录下的<code>jar</code>包或 <code>–D java.ext.dirs</code>指定目录下的<code>jar</code>包装入工作库</p></li><li><p><code>System ClassLoader</code>-系统类加载器：负责<code>java –classpath</code> 或 <code>–D java.class.path</code>所指的目录下的类与<code>jar</code>包装入工作,是最常用的加载器</p></li></ol><p>例如可做如下测试</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//自定义类，使用系统类加载器</span></span><br><span class="line">    ClassLoader cl = ClassLoaderTest<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span>;</span><br><span class="line">    System.out.println(cl);</span><br><span class="line">    <span class="comment">//调用类加载的getParent()，可获取扩展类加载器</span></span><br><span class="line">    ClassLoader parent = cl.getParent();</span><br><span class="line">    System.out.println(parent);</span><br><span class="line">    <span class="comment">//再次调用getParent()，则可获取引导类加载器，但是其主要加载Java核心类库且无法获取，故为null</span></span><br><span class="line">    ClassLoader parent1 = parent.getParent();</span><br><span class="line">    System.out.println(parent1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      类的加载与ClassLoader
    
    </summary>
    
    
    
      <category term="Java" scheme="http://yamger.github.io/tags/Java/"/>
    
      <category term="reflection" scheme="http://yamger.github.io/tags/reflection/"/>
    
  </entry>
  
  <entry>
    <title>Java反射</title>
    <link href="http://yamger.github.io/2020/02/09/java-reflection/"/>
    <id>http://yamger.github.io/2020/02/09/java-reflection/</id>
    <published>2020-02-09T14:38:51.222Z</published>
    <updated>2020-02-10T07:32:38.634Z</updated>
    
    <content type="html"><![CDATA[<p><code>Reflection</code>（反射）是被视为动态语言的关键，反射机制允许程序在执行期借助于<code>Reflection API</code>取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。</p><p>加载完类之后，在堆内存的方法区中就产生了一个<code>Class</code>类型的对象（一个类只有一个<code>Class</code>对象），这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。这个对象就像一面镜子，透过这个镜子看到类的结构，所以，我们形象的称之为：<strong>反射</strong>。</p><p><strong>通过反射获取类实例</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Person.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"你好，我是一个好人"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">showNation</span><span class="params">(String nation)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我的国籍是"</span> + nation);</span><br><span class="line">        <span class="keyword">return</span> nation;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>实现1：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchFieldException </span>&#123;</span><br><span class="line">    Class clazz = Person<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    Constructor cons = clazz.getConstructor(String<span class="class">.<span class="keyword">class</span>, <span class="title">int</span>.<span class="title">class</span>)</span>;</span><br><span class="line">    Person p = (Person)cons.newInstance(<span class="string">"yamger"</span>, <span class="number">12</span>);</span><br><span class="line">    System.out.println(p);</span><br><span class="line">    Field age = clazz.getDeclaredField(<span class="string">"age"</span>);</span><br><span class="line">    age.set(p, <span class="number">19</span>);</span><br><span class="line">    System.out.println(p);</span><br><span class="line">    Method show = clazz.getDeclaredMethod(<span class="string">"show"</span>, <span class="keyword">null</span>);</span><br><span class="line">    show.invoke(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="调用私有结构测试"><a class="markdownIt-Anchor" href="#调用私有结构测试"></a> 调用私有结构测试</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchFieldException </span>&#123;</span><br><span class="line">        Class clazz = Person<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        Person p = (Person) cons.newInstance(<span class="string">"yamger"</span>, <span class="number">12</span>);</span><br><span class="line">        <span class="comment">//私有构造器测试</span></span><br><span class="line">        Constructor cons1 = clazz.getDeclaredConstructor(String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        cons1.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        p = (Person) cons1.newInstance(<span class="string">"yangsheng"</span>);</span><br><span class="line">        System.out.println(p);</span><br><span class="line">        Field name = clazz.getDeclaredField(<span class="string">"name"</span>);</span><br><span class="line">        name.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        name.set(p, <span class="string">"yanger"</span>);</span><br><span class="line">        System.out.println(p);</span><br><span class="line"></span><br><span class="line">        Method showNation = clazz.getDeclaredMethod(<span class="string">"showNation"</span>,String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        showNation.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        String nation = (String)showNation.invoke(p, <span class="string">"china"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><h2 id="反射和对象封装是否矛盾呢如何看待这两个技术"><a class="markdownIt-Anchor" href="#反射和对象封装是否矛盾呢如何看待这两个技术"></a> 反射和对象封装是否矛盾呢？如何看待这两个技术</h2><p>首先，这两种技术是不矛盾的。封装性会确定属性的权限，其私有属性是告诉我们不要使用，可以使用公共属性。也就是说，反射出现后，封装性可以理解为建议哪些属性使用、哪些不要使用。历用反射机制我们可以调用任何属性。</p><h2 id="class类的理解"><a class="markdownIt-Anchor" href="#class类的理解"></a> <code>Class</code>类的理解</h2><p><code>Class</code>是反射的源头。</p><h3 id="1-类的加载过程"><a class="markdownIt-Anchor" href="#1-类的加载过程"></a> 1. 类的加载过程</h3><p>程序在编译之后会生成<code>.class</code>字节码文件，之后使用<code>java.exe</code> 命令对字节码文件进行解释执行。相当于将字节码文件载入内存，此过程称为类的加载。加载到内存中的类称为运行时类，并作为<code>Class</code>的一个实例。另外，<code>Class</code>对应了一个运行时类。加载至内存的运行时类会缓存一定时间，在此时间内，我们可以用不同的方式来获取此运行类。</p><p>当程序主动使用某类时，若类还没有加载到内存中，系统会通过如下三个步骤来对该类初始化</p><p>类的加载-&gt;类的链接-&gt;类的初始化</p><p><strong>类的加载：</strong> 将类的class文件读入内存，并为之创建一个<code>java.lang.Class</code>对象。该过程由类加载器完成</p><p><strong>类的链接：</strong> 将类的二进制数据合并到<code>JRE</code>中</p><p><strong>类的初始化：</strong> <code>JVM</code>负责对类进行初始化,使用类构造器<code>&lt;clinit&gt;()</code>。在这一步骤中，对静态变量的赋值操作取决于<strong>静态代码块</strong>和初始化直接赋值的先后顺序</p><h3 id="2-哪些类型可以有class对象"><a class="markdownIt-Anchor" href="#2-哪些类型可以有class对象"></a> 2. 哪些类型可以有<code>Class</code>对象</h3><ul><li><code>class</code>:外部类，成员（成员内部类，静态内部类），局部内部类，匿名内部类。</li><li><code>interface</code></li><li><code>[]</code></li><li><code>enum</code></li><li><code>annotation</code></li><li>基本数据类型<code>primitive type</code></li><li><code>void</code><br>*注：*只要数组的元素类型和维度一致，则是同一个<code>class</code></li></ul><h2 id="获取class实例的方法"><a class="markdownIt-Anchor" href="#获取class实例的方法"></a> 获取<code>class</code>实例的方法</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">    <span class="comment">//1 调用运行时类属性-&gt;,即.class</span></span><br><span class="line">    Class&lt;Person&gt; clazz = Person<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    System.out.println(clazz);</span><br><span class="line">    <span class="comment">//2 通过对象过去</span></span><br><span class="line">    Person p = <span class="keyword">new</span> Person(<span class="string">"yamger"</span>, <span class="number">12</span>);</span><br><span class="line">    Class pClass = p.getClass();</span><br><span class="line">    System.out.println(pClass);</span><br><span class="line">    <span class="comment">//3 调用静态Class.forName方法</span></span><br><span class="line">    Class&lt;?&gt; aClass = Class.forName(<span class="string">"com.yamger.java.Person"</span>);</span><br><span class="line">    System.out.println(aClass);</span><br><span class="line">    <span class="comment">//4 使用类的加载器</span></span><br><span class="line">    ClassLoader cl = ClassTest<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span>;</span><br><span class="line">    Class&lt;?&gt; p1 = cl.loadClass(<span class="string">"com.yamger.java.Person"</span>);</span><br><span class="line">    System.out.println(p1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>使用类的加载器不常用。且使用<code>Class.forName</code>较为常用，其能更好的反应动态性的特点，建议使用</p><h2 id="获取运行时类的实例"><a class="markdownIt-Anchor" href="#获取运行时类的实例"></a> 获取运行时类的实例</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> IllegalAccessException, InstantiationException </span>&#123;</span><br><span class="line">    <span class="comment">//获取class</span></span><br><span class="line">    Class&lt;Person&gt; clazz = Person<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 使用NewInstance()创建对应运行时类对象.内部调用了空参构造器</span></span><br><span class="line"><span class="comment">        * 若没有提供空参构造器，则会抛出java.lang.InstantiationException异常</span></span><br><span class="line"><span class="comment">        * 空参构造器不能是private，确保可以访问。</span></span><br><span class="line"><span class="comment">        * JavaBean中要求提供一个空参构造器，便于通过反射创建运行时类对象，便于子类调用此运行时类时，默认调用super时，保证父类有次构造器</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">    Person o = clazz.newInstance();</span><br><span class="line">    System.out.println(o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="获取运行时类的完整结构"><a class="markdownIt-Anchor" href="#获取运行时类的完整结构"></a> 获取运行时类的完整结构</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Class clazz = Person<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">Field[] gdf = clazz.getDeclaredFields();</span><br><span class="line"><span class="keyword">for</span> (Field x : gdf) &#123;</span><br><span class="line">    <span class="comment">//返回权限修饰符的整型编号</span></span><br><span class="line"><span class="comment">//            public static final int PUBLIC           = 0x00000001;</span></span><br><span class="line"><span class="comment">//            public static final int PRIVATE          = 0x00000002;</span></span><br><span class="line"><span class="comment">//            public static final int PROTECTED        = 0x00000004;</span></span><br><span class="line">    <span class="keyword">int</span> modifiers = x.getModifiers();</span><br><span class="line">    Class&lt;?&gt; type = x.getType();</span><br><span class="line">    System.out.println(type);</span><br><span class="line">    <span class="comment">//使用Modifier.toString()返回字符串描述</span></span><br><span class="line">    System.out.println(Modifier.toString(modifiers));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>其获取方法都是类似的，不再提供<code>demo</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;Reflection&lt;/code&gt;（反射）是被视为动态语言的关键，反射机制允许程序在执行期借助于&lt;code&gt;Reflection API&lt;/code&gt;取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。&lt;/p&gt;
&lt;p&gt;加载完类之后，在堆内存的方法区中就产
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java缓冲流</title>
    <link href="http://yamger.github.io/2020/02/08/buffered-stream/"/>
    <id>http://yamger.github.io/2020/02/08/buffered-stream/</id>
    <published>2020-02-08T07:18:05.473Z</published>
    <updated>2020-02-10T07:31:22.184Z</updated>
    
    <content type="html"><![CDATA[<p>为了提高数据读写的速度，<code>Java API</code>提供了带缓冲功能的流类，在使用这些流类时，会创建一个内部缓冲区数组，缺省使用<code>8192</code>个字节(<code>8Kb</code>)的缓冲区。缓冲流要“套接”在相应的节点流之上，根据数据操作单位可以把缓冲流分为：</p><ul><li>BufferedInputStream 和 BufferedOutputStream</li><li>BufferedReader 和 BufferedWriter</li></ul><h2 id="使用bufferedstream字节流进行文件复制"><a class="markdownIt-Anchor" href="#使用bufferedstream字节流进行文件复制"></a> 使用<code>bufferedStream</code>字节流进行文件复制</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//实例化文件</span></span><br><span class="line">    File src = <span class="keyword">new</span> File(<span class="string">"io.txt"</span>);</span><br><span class="line">    File tar = <span class="keyword">new</span> File(<span class="string">"tar.txt"</span>);</span><br><span class="line">    FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">    FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">    BufferedInputStream bis = <span class="keyword">null</span>;</span><br><span class="line">    BufferedOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//节点流(字节流)</span></span><br><span class="line">        fis = <span class="keyword">new</span> FileInputStream(src);</span><br><span class="line">        fos = <span class="keyword">new</span> FileOutputStream(tar);</span><br><span class="line">        <span class="comment">//缓冲流</span></span><br><span class="line">        bis = <span class="keyword">new</span> BufferedInputStream(fis);</span><br><span class="line">        bos = <span class="keyword">new</span> BufferedOutputStream(fos);</span><br><span class="line">        <span class="comment">//复制</span></span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> len = bis.read(buffer); len != -<span class="number">1</span>; len = bis.read(buffer)) &#123;</span><br><span class="line">            bos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//先关闭缓冲流，再关闭节点流,且关闭缓冲流时，节点流会自动关闭，因此字节流的close可不执行</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (bis != <span class="keyword">null</span>)</span><br><span class="line">            bis.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (bos != <span class="keyword">null</span>)</span><br><span class="line">            bos.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    try &#123;</span></span><br><span class="line"><span class="comment">        if(fis!=null)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            fis.close();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment">        e.printStackTrace();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    try &#123;</span></span><br><span class="line"><span class="comment">        if(fos!=null)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            fos.close();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment">        e.printStackTrace();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="使用字符缓冲流bufferedreader和bufferedwriter"><a class="markdownIt-Anchor" href="#使用字符缓冲流bufferedreader和bufferedwriter"></a> 使用字符缓冲流<code>BufferedReader</code>和<code>BufferedWriter</code></h2><p>复制文件样例</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">BufferedWriter bw = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="keyword">new</span> File(<span class="string">"io.txt"</span>)));</span><br><span class="line">    bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="keyword">new</span> File(<span class="string">"2.txt"</span>)));</span><br><span class="line">    <span class="keyword">char</span> [] buffer = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> len = br.read(buffer);len!=-<span class="number">1</span>;len=br.read(buffer))&#123;</span><br><span class="line">        bw.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"Copy successfully!"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(br!=<span class="keyword">null</span>)</span><br><span class="line">    br.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(bw!=<span class="keyword">null</span>)</span><br><span class="line">        bw.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="使用缓冲流处理文件传输"><a class="markdownIt-Anchor" href="#使用缓冲流处理文件传输"></a> 使用缓冲流处理文件传输</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Socket s = <span class="keyword">new</span> Socket(InetAddress.getByName(<span class="string">"127.0.0.1"</span>),<span class="number">8899</span>);</span><br><span class="line">    OutputStream os = s.getOutputStream();</span><br><span class="line">    FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"1.jpg"</span>));</span><br><span class="line">    BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(fis);</span><br><span class="line">    <span class="keyword">byte</span> []buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">while</span>((len = bis.read(buf))!=-<span class="number">1</span>)&#123;</span><br><span class="line">        os.write(buf, <span class="number">0</span>, len);</span><br><span class="line">    &#125;</span><br><span class="line">    bis.close();</span><br><span class="line">    os.close();</span><br><span class="line">    s.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">server</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">8899</span>);</span><br><span class="line">    Socket soc = server.accept();</span><br><span class="line">    InputStream is = soc.getInputStream();</span><br><span class="line"></span><br><span class="line">    FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"2.jpg"</span>));</span><br><span class="line">    BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(fos);</span><br><span class="line">    <span class="keyword">byte</span> []buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">while</span>((len = is.read(buf))!=-<span class="number">1</span>)&#123;</span><br><span class="line">        bos.write(buf, <span class="number">0</span>,len);</span><br><span class="line">    &#125;</span><br><span class="line">    server.close();</span><br><span class="line">    soc.close();</span><br><span class="line">    fos.close();</span><br><span class="line">    is.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>仅使用<code>throws</code>抛出异常给出例子，正确处理应使用<code>try catch</code>异常处理机制.</p><h2 id="升级操作使用socket给客户端发送消息"><a class="markdownIt-Anchor" href="#升级操作使用socket给客户端发送消息"></a> 升级操作，使用<code>socket</code>给客户端发送消息</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Socket s = <span class="keyword">new</span> Socket(InetAddress.getByName(<span class="string">"127.0.0.1"</span>),<span class="number">8899</span>);</span><br><span class="line">    OutputStream os = s.getOutputStream();</span><br><span class="line">    FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"1.jpg"</span>));</span><br><span class="line">    BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(fis);</span><br><span class="line">    <span class="keyword">byte</span> []buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">while</span>((len = bis.read(buf))!=-<span class="number">1</span>)&#123;</span><br><span class="line">        os.write(buf, <span class="number">0</span>, len);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//此处需要关闭输出流，不然会陷入死等</span></span><br><span class="line">    s.shutdownOutput();</span><br><span class="line">    InputStream is = s.getInputStream();</span><br><span class="line">    ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">    <span class="keyword">byte</span>[]buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">128</span>];</span><br><span class="line">    <span class="keyword">while</span>((len = is.read(buff))!=-<span class="number">1</span>)&#123;</span><br><span class="line">        baos.write(buff,<span class="number">0</span>,len);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭输出</span></span><br><span class="line"></span><br><span class="line">    System.out.println(baos);</span><br><span class="line">    is.close();</span><br><span class="line">    bis.close();</span><br><span class="line">    os.close();</span><br><span class="line">    s.close();</span><br><span class="line">    baos.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">server</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">8899</span>);</span><br><span class="line">    Socket soc = server.accept();</span><br><span class="line">    InputStream is = soc.getInputStream();</span><br><span class="line"></span><br><span class="line">    FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"2.jpg"</span>));</span><br><span class="line">    BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(fos);</span><br><span class="line">    <span class="keyword">byte</span> []buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">while</span>((len = is.read(buf))!=-<span class="number">1</span>)&#123;</span><br><span class="line">        bos.write(buf, <span class="number">0</span>,len);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//        soc.shutdownInput();</span></span><br><span class="line">    bos.flush();</span><br><span class="line">    System.out.println(<span class="string">"图片传输完成"</span>);</span><br><span class="line">    OutputStream os = soc.getOutputStream();</span><br><span class="line">    os.write(<span class="string">"你好，我已收到消息"</span>.getBytes());</span><br><span class="line">    server.close();</span><br><span class="line">    soc.close();</span><br><span class="line">    fos.close();</span><br><span class="line">    is.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      Java IO缓冲流的应用
    
    </summary>
    
    
      <category term="Java" scheme="http://yamger.github.io/categories/Java/"/>
    
      <category term="io" scheme="http://yamger.github.io/categories/Java/io/"/>
    
      <category term="Stream" scheme="http://yamger.github.io/categories/Java/io/Stream/"/>
    
    
      <category term="Java" scheme="http://yamger.github.io/tags/Java/"/>
    
      <category term="io" scheme="http://yamger.github.io/tags/io/"/>
    
      <category term="Stream" scheme="http://yamger.github.io/tags/Stream/"/>
    
  </entry>
  
  <entry>
    <title>字节流</title>
    <link href="http://yamger.github.io/2020/02/08/byte-io-stream/"/>
    <id>http://yamger.github.io/2020/02/08/byte-io-stream/</id>
    <published>2020-02-08T05:23:04.000Z</published>
    <updated>2020-02-10T07:34:54.832Z</updated>
    
    <content type="html"><![CDATA[<p>字节流为传输过程中，传输数据的最基本单位是字节的流。是<code>Java io</code>中一个极为重要的流，使用它可以对多数文件进行操作，例如对图片、视频等文件的读取，复制文本文件等等，有极大的应用范围，</p><h2 id="读取非文本数据"><a class="markdownIt-Anchor" href="#读取非文本数据"></a> 读取非文本数据</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">FileInputOutputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    File src = <span class="keyword">new</span> File(<span class="string">"1.jpg"</span>);</span><br><span class="line">    File tar = <span class="keyword">new</span> File(<span class="string">"2.jpg"</span>);</span><br><span class="line">    FileInputStream fis = <span class="keyword">new</span> FileInputStream(src);</span><br><span class="line">    FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(tar);</span><br><span class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> len = fis.read(buffer); len != -<span class="number">1</span>; len = fis.read(buffer)) &#123;</span><br><span class="line">        fos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    fis.close();</span><br><span class="line">    fos.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="文件复制操作"><a class="markdownIt-Anchor" href="#文件复制操作"></a> 文件复制操作</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UniverseCopyFile</span><span class="params">(File src, File tar)</span> </span>&#123;</span><br><span class="line">    FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">    FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        fis = <span class="keyword">new</span> FileInputStream(src);</span><br><span class="line">        fos = <span class="keyword">new</span> FileOutputStream(tar);</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> len = fis.read(buffer); len != -<span class="number">1</span>; len = fis.read(buffer)) &#123;</span><br><span class="line">            fos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(fis!=<span class="keyword">null</span>)</span><br><span class="line">            fis.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(fos!=<span class="keyword">null</span>)</span><br><span class="line">            fos.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> start=System.currentTimeMillis();</span><br><span class="line">    UniverseCopyFile(<span class="keyword">new</span> File(<span class="string">"1.jpg"</span>), <span class="keyword">new</span> File(<span class="string">"3.jpg"</span>));</span><br><span class="line">    <span class="keyword">long</span> end=System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">"cost:"</span>+(end - start)+<span class="string">"ms"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      Java字节流的介绍
    
    </summary>
    
    
      <category term="Java" scheme="http://yamger.github.io/categories/Java/"/>
    
      <category term="io" scheme="http://yamger.github.io/categories/Java/io/"/>
    
      <category term="Stream" scheme="http://yamger.github.io/categories/Java/io/Stream/"/>
    
    
      <category term="Java" scheme="http://yamger.github.io/tags/Java/"/>
    
      <category term="io" scheme="http://yamger.github.io/tags/io/"/>
    
      <category term="Stream" scheme="http://yamger.github.io/tags/Stream/"/>
    
  </entry>
  
  <entry>
    <title>Java 字符流</title>
    <link href="http://yamger.github.io/2020/02/08/char-io-stream/"/>
    <id>http://yamger.github.io/2020/02/08/char-io-stream/</id>
    <published>2020-02-08T05:16:59.000Z</published>
    <updated>2020-02-10T07:35:05.259Z</updated>
    
    <content type="html"><![CDATA[<p>字符流也叫节点流，用于处理字符文件，例如txt等。</p><p>使用该<code>io</code>四个基本操作为</p><ol><li>建立一个流对象，将已存在的一个文件加载进流</li><li>写入|读取数据</li><li>关闭流</li></ol><h2 id="io测试"><a class="markdownIt-Anchor" href="#io测试"></a> IO测试</h2><p><strong>字符流<code>FileReader</code>测试</strong></p><p>未做异常处理，可抛出异常或进行异常处理</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实例化File类的文件，说明要操作的文件</span></span><br><span class="line">File f = <span class="keyword">new</span> File(<span class="string">"io.txt"</span>);</span><br><span class="line"><span class="comment">//提供具体流</span></span><br><span class="line">FileReader fr = <span class="keyword">new</span> FileReader(f);</span><br><span class="line"><span class="comment">//数据的读入，无参read()返回字符的ascii码值，输出强转。</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> r = fr.read();r!=-<span class="number">1</span>;r = fr.read())&#123;</span><br><span class="line">    System.out.print((<span class="keyword">char</span>) r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭字符输入流</span></span><br><span class="line">fr.close();</span><br></pre></td></tr></table></figure></div><p><strong><code>read</code>重载方法测试</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//读入操作，定义文件对象</span></span><br><span class="line">    File file = <span class="keyword">new</span> File(<span class="string">"io.txt"</span>);</span><br><span class="line">    <span class="comment">//实例化流</span></span><br><span class="line">    FileReader fr = <span class="keyword">new</span> FileReader(file);</span><br><span class="line">    <span class="keyword">char</span> []chars = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">5</span>];</span><br><span class="line">    <span class="comment">//读入操作</span></span><br><span class="line">    <span class="comment">//该重载char放入一个char数组，且返回本次读取的字符数，如果-1则表示正常结束</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> read = fr.read(chars);read!=-<span class="number">1</span>;read = fr.read(chars))&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;read;i++)&#123;</span><br><span class="line">            System.out.print(chars[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * * 也可使用 String str= new String(chars,0,len)来获取</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">//关闭流</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><strong>字符流<code>FileWriter</code>测试</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">FileWriterTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//对应的file可以不存在，若不存在则会自动创建文件，如果存在则会自动覆盖文件数据，写为FileWriter(file,true)可以追加在文件末尾。</span></span><br><span class="line">    <span class="comment">//实例化File对象-写出文件</span></span><br><span class="line">    File file = <span class="keyword">new</span> File(<span class="string">"hello.out"</span>);</span><br><span class="line">    <span class="comment">//提供Writer流</span></span><br><span class="line">    FileWriter fw = <span class="keyword">new</span> FileWriter(file);</span><br><span class="line">    <span class="comment">//写出操作</span></span><br><span class="line">    fw.write(<span class="string">"Hello.I'm yamger\n"</span>);</span><br><span class="line">    fw.write(<span class="string">"I nead your attention."</span>);</span><br><span class="line">    <span class="comment">//关闭流</span></span><br><span class="line">    fw.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><strong>注:</strong> <code>FileReader or FileWriter</code>不能处理图片。</p>]]></content>
    
    <summary type="html">
    
      Java字符流的介绍
    
    </summary>
    
    
      <category term="Java" scheme="http://yamger.github.io/categories/Java/"/>
    
      <category term="io" scheme="http://yamger.github.io/categories/Java/io/"/>
    
      <category term="Stream" scheme="http://yamger.github.io/categories/Java/io/Stream/"/>
    
    
      <category term="Java" scheme="http://yamger.github.io/tags/Java/"/>
    
      <category term="io" scheme="http://yamger.github.io/tags/io/"/>
    
      <category term="Stream" scheme="http://yamger.github.io/tags/Stream/"/>
    
  </entry>
  
  <entry>
    <title>io流</title>
    <link href="http://yamger.github.io/2020/02/08/io-stream/"/>
    <id>http://yamger.github.io/2020/02/08/io-stream/</id>
    <published>2020-02-07T18:06:49.000Z</published>
    <updated>2020-02-08T05:18:24.656Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="javaio原理"><a class="markdownIt-Anchor" href="#javaio原理"></a> JavaIO原理</h2><p><code>I/O</code>是<code>Input/Output``z的缩写，</code>I/O`技术是非常实用的技术，用于处理设备之间的数据传输。如读/写文件，网络通讯等。</p><p><code>Java</code>程序中，对于数据的输入/输出操作以“流(<code>stream</code>)” 的方式进行。</p><p><code>java.io</code>包下提供了各种“流”类和接口，用以获取不同种类的数据，并通过标准的方法输入或输出数据。</p><p><strong>输入<code>input</code></strong><br>读取外部数据（磁盘、光盘等存储设备的数据）到程序（内存）中。</p><p><strong>输出<code>output</code></strong><br>将程序（内存）数据输出到磁盘、光盘等存储设备中。</p><h2 id="io流的分类"><a class="markdownIt-Anchor" href="#io流的分类"></a> IO流的分类</h2><ul><li>按操作数据单位不同分为：字节流(<code>8 bit</code>)，字符流(<code>16 bit</code>)</li><li>按数据流的流向不同分为：输入流，输出流</li><li>按流的角色的不同分为：节点流，处理流</li></ul><h3 id="io流的抽象类"><a class="markdownIt-Anchor" href="#io流的抽象类"></a> IO流的抽象类</h3><table><thead><tr><th style="text-align:center">抽象基类</th><th style="text-align:center">字节流</th><th style="text-align:center">字符流</th></tr></thead><tbody><tr><td style="text-align:center">输入流</td><td style="text-align:center"><code>InputStream</code></td><td style="text-align:center"><code>Reader</code></td></tr><tr><td style="text-align:center">输出流</td><td style="text-align:center"><code>OutputStream</code></td><td style="text-align:center"><code>Writer</code></td></tr></tbody></table><p><strong>注</strong>: <code>Java</code>的<code>IO</code>流共涉及<code>40</code>多个类，实际上非常规则.都是从上述四个抽象类派生出的，由这四个类派生出来的子类名称都是以其父类名作为子类名后缀。</p><h2 id="io流体系"><a class="markdownIt-Anchor" href="#io流体系"></a> IO流体系</h2><a href="/image/io-stream-system.jpg" data-fancybox="group" data-caption="undefined" class="fancybox"><img class="lazyload" data-src="/image/io-stream-system.jpg"></a>]]></content>
    
    <summary type="html">
    
      JavaIO流概念
    
    </summary>
    
    
      <category term="Java" scheme="http://yamger.github.io/categories/Java/"/>
    
      <category term="io" scheme="http://yamger.github.io/categories/Java/io/"/>
    
    
      <category term="Java" scheme="http://yamger.github.io/tags/Java/"/>
    
      <category term="io" scheme="http://yamger.github.io/tags/io/"/>
    
  </entry>
  
  <entry>
    <title>Java File类的使用</title>
    <link href="http://yamger.github.io/2020/02/07/java-file-class/"/>
    <id>http://yamger.github.io/2020/02/07/java-file-class/</id>
    <published>2020-02-07T15:53:32.764Z</published>
    <updated>2020-02-10T07:19:02.201Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="file类"><a class="markdownIt-Anchor" href="#file类"></a> File类</h2><p><code>File</code>类的一个对象，代表一个文件或者一个文件目录，声明在<code>java.io</code>包下</p><h3 id="获取实例"><a class="markdownIt-Anchor" href="#获取实例"></a> 获取实例</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 相对历经：相对于idea中module</span></span><br><span class="line"><span class="comment">        * 绝对路径：绝对地址，从盘符开始</span></span><br><span class="line"><span class="comment">        * 分隔符：File.separator</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">    <span class="comment">//构造器1</span></span><br><span class="line">    File file = <span class="keyword">new</span> File(<span class="string">"hello.txt"</span>);</span><br><span class="line">    <span class="comment">//构造器2</span></span><br><span class="line">    File file2 = <span class="keyword">new</span> File(<span class="string">"C:\\workspace"</span>,<span class="string">"file"</span>);</span><br><span class="line">    <span class="comment">//构造器3</span></span><br><span class="line">    File file3 = <span class="keyword">new</span> File(<span class="string">"file2"</span>,<span class="string">"hi,txt"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="实例"><a class="markdownIt-Anchor" href="#实例"></a> 实例</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    File file1 = <span class="keyword">new</span> File(<span class="string">"hello.txt"</span>);</span><br><span class="line"></span><br><span class="line">    File file2 = <span class="keyword">new</span> File(<span class="string">"E:"</span> + File.separator + <span class="string">"java-learning"</span> + File.separator + <span class="string">"课件笔记源码资料"</span> + File.separator + <span class="string">"io.txt"</span>);</span><br><span class="line">    System.out.println(file1.getAbsolutePath());</span><br><span class="line">    System.out.println(file1.getName());</span><br><span class="line">    System.out.println(file1.getParent());</span><br><span class="line">    System.out.println(file1.length());</span><br><span class="line">    System.out.println(file1.lastModified());</span><br><span class="line">    System.out.println();</span><br><span class="line">    System.out.println(file2.getAbsolutePath());</span><br><span class="line">    System.out.println(file2.getName());</span><br><span class="line">    System.out.println(file2.getParent());</span><br><span class="line">    System.out.println(file2.length());</span><br><span class="line">    System.out.println(file2.lastModified());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件目录测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    File file = <span class="keyword">new</span> File(<span class="string">"E:\\IDEA-workspace\\JavaSenior"</span>);</span><br><span class="line">    String []list = file.list();</span><br><span class="line">    <span class="keyword">for</span>(String x:list)&#123;</span><br><span class="line">        System.out.println(x);</span><br><span class="line">    &#125;</span><br><span class="line">    File[] files = file.listFiles();</span><br><span class="line">    <span class="keyword">for</span>(File x:files)&#123;</span><br><span class="line">        System.out.println(x.getAbsolutePath());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重命名测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 要求file1 存在，file2 不存在。</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    File file1 = <span class="keyword">new</span> File(<span class="string">"hello.txt"</span>);</span><br><span class="line">    File file2 = <span class="keyword">new</span> File(<span class="string">"io.txt"</span>);</span><br><span class="line">    <span class="keyword">boolean</span> t = file1.renameTo(file2);</span><br><span class="line">    System.out.println(t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="常用方法"><a class="markdownIt-Anchor" href="#常用方法"></a> 常用方法</h2><h3 id="file类的获取功能"><a class="markdownIt-Anchor" href="#file类的获取功能"></a> File类的获取功能</h3><ul><li>public String getAbsolutePath()：获取绝对路径</li><li>public String getPath() ：获取路径</li><li>public String getName() ：获取名称</li><li>public String getParent()：获取上层文件目录路径。若无，返回null</li><li>public long length() ：获取文件长度（即：字节数）。不能获取目录的长度。</li><li>public long lastModified() ：获取最后一次的修改时间，毫秒值</li><li>public String[] list() ：获取指定目录下的所有文件或者文件目录的名称数组</li><li>public File[] listFiles() ：获取指定目录下的所有文件或者文件目录的File数组</li></ul><h3 id="file类的重命名功能"><a class="markdownIt-Anchor" href="#file类的重命名功能"></a> File类的重命名功能</h3><ul><li>public boolean renameTo(File dest):把文件重命名为指定的文件路径</li></ul><h3 id="file类的判断功能"><a class="markdownIt-Anchor" href="#file类的判断功能"></a> File类的判断功能</h3><ul><li>public boolean isDirectory()：判断是否是文件目录</li><li>public boolean isFile() ：判断是否是文件</li><li>public boolean exists() ：判断是否存在</li><li>public boolean canRead() ：判断是否可读</li><li>public boolean canWrite() ：判断是否可写</li><li>public boolean isHidden() ：判断是否隐藏</li></ul><h3 id="file类的创建功能"><a class="markdownIt-Anchor" href="#file类的创建功能"></a> File类的创建功能</h3><ul><li>public boolean createNewFile() ：创建文件。若文件存在，则不创建，返回false</li><li>public boolean mkdir() ：创建文件目录。如果此文件目录存在，就不创建了。如果此文件目录的上层目录不存在，也不创建。</li><li>public boolean mkdirs() ：创建文件目录。如果上层文件目录不存在，一并创建<br><strong>如你创建文件或者文件目录没有写盘符路径，那么，默认在项目路径下。</strong></li></ul><h3 id="file类的删除功能"><a class="markdownIt-Anchor" href="#file类的删除功能"></a> File类的删除功能</h3><ul><li>public boolean delete()：删除文件或者文件夹<br><strong>Java中的删除不走回收站。要删除一个文件目录，请注意该文件目录内不能包含文件或者文件目录</strong><br>如果要删除的文件夹中有文件，则可采用递归删除</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;file类&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#file类&quot;&gt;&lt;/a&gt; File类&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;File&lt;/code&gt;类的一个对象，代表一个文件或者一个文件目录，声明在&lt;co
      
    
    </summary>
    
    
      <category term="Java" scheme="http://yamger.github.io/categories/Java/"/>
    
      <category term="File" scheme="http://yamger.github.io/categories/Java/File/"/>
    
    
      <category term="Java" scheme="http://yamger.github.io/tags/Java/"/>
    
      <category term="File" scheme="http://yamger.github.io/tags/File/"/>
    
  </entry>
  
  <entry>
    <title>Java泛型通配符</title>
    <link href="http://yamger.github.io/2020/02/07/generics/"/>
    <id>http://yamger.github.io/2020/02/07/generics/</id>
    <published>2020-02-07T14:22:25.568Z</published>
    <updated>2020-02-10T07:18:03.816Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="java泛型通配符"><a class="markdownIt-Anchor" href="#java泛型通配符"></a> Java泛型通配符</h1><h2 id="有限制条件的通配符"><a class="markdownIt-Anchor" href="#有限制条件的通配符"></a> 有限制条件的通配符</h2><ul><li><code>? extends Class</code>;</li><li><code>? super Class</code>;</li></ul><p>例如：<br>我们首先声明<code>Person.clsss</code>和<code>Student.class</code></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Person.class</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Student.class</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span>  <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>做如下测试</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@org</span>.junit.Test</span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//此处的 ? extends Person表示范围可以是Person或其子类，可视为&lt;=符号</span></span><br><span class="line">    List&lt;? extends Person&gt; list1 = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//该限制表示为可以是Person或其父类，可视为&gt;=符号</span></span><br><span class="line">    List&lt;? <span class="keyword">super</span> Person&gt; list2 = <span class="keyword">null</span>;</span><br><span class="line">    List&lt;Student&gt; list3 = <span class="keyword">null</span>;</span><br><span class="line">    List&lt;Person&gt; list4 = <span class="keyword">null</span>;</span><br><span class="line">    List&lt;Object&gt; list5 = <span class="keyword">null</span>;</span><br><span class="line">    list1 = list3;</span><br><span class="line">    list1 = list4;</span><br><span class="line">    list1 = list5;<span class="comment">//报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//      ----------</span></span><br><span class="line">    list2 = list3;<span class="comment">//报错</span></span><br><span class="line">    list2 = list4;</span><br><span class="line">    list2 = list5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="结论"><a class="markdownIt-Anchor" href="#结论"></a> 结论</h3><p><code>? extends A: G&lt;? extends A&gt;</code>可以作为<code>G&lt;A&gt;</code>和<code>G&lt;B&gt;</code>的父类，其中<code>B</code>是<code>A</code>的子类</p><p><code>? super A: G&lt;? super A&gt;</code> 可以作为<code>G&lt;A&gt;</code>和<code>G&lt;B&gt;</code>的父类，其中<code>B</code>是<code>A</code>的父类</p><p>使用了通配符的集合不能添加数据，但是可以通过迭代器遍历。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;java泛型通配符&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java泛型通配符&quot;&gt;&lt;/a&gt; Java泛型通配符&lt;/h1&gt;
&lt;h2 id=&quot;有限制条件的通配符&quot;&gt;&lt;a class=&quot;markdow
      
    
    </summary>
    
    
      <category term="Java" scheme="http://yamger.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yamger.github.io/tags/Java/"/>
    
      <category term="generics" scheme="http://yamger.github.io/tags/generics/"/>
    
  </entry>
  
  <entry>
    <title>WELCOME TO MY BLOG</title>
    <link href="http://yamger.github.io/2020/02/07/hello-world/"/>
    <id>http://yamger.github.io/2020/02/07/hello-world/</id>
    <published>2020-02-07T14:08:40.291Z</published>
    <updated>2020-02-07T14:08:40.291Z</updated>
    
    <content type="html"><![CDATA[<h1 id="博客简介"><a class="markdownIt-Anchor" href="#博客简介"></a> 博客简介</h1><p>计算机科学与技术在读，喜欢前端与新兴技术，喜爱算法问题。<br>日常记录所学所见所识。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;博客简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#博客简介&quot;&gt;&lt;/a&gt; 博客简介&lt;/h1&gt;
&lt;p&gt;计算机科学与技术在读，喜欢前端与新兴技术，喜爱算法问题。&lt;br&gt;
日常记录所学所见所识。&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
</feed>
